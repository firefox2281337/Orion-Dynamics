/**
 * üé™ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)
 */
import { EnhancedThemeManager, ButtonEffects } from './components/enhanced-theme-manager.js';
import { TooltipManager } from './components/tooltip-manager.js';
import { RefreshButton } from './components/refresh-button.js';
import { Navigation } from './components/navigation.js';

// –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
import { KaskoPage } from './pages/kasko-page.js';
import { MegahelperPage } from './pages/megahelper-page.js';
import { MetragiPage } from './pages/metragi-page.js';
import { SoftwarePage } from './pages/software-page.js';
import { SqlPage } from './pages/sql-page.js';

import { showNotification } from './core/utils.js';

class OrionDynamicsApp {
    constructor() {
        this.components = new Map();
        this.currentPage = null;
        this.isInitialized = false;
        this.initializationErrors = [];
    }

    async init() {
        if (this.isInitialized) return;

        try {

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
            await this.initializeBaseComponents();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç URL (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
            await this.initializePage();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.setupGlobalHandlers();

            this.isInitialized = true;
            
            // –û—Ç—á–µ—Ç –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (this.initializationErrors.length > 0) {
                showNotification(`–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å ${this.initializationErrors.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏`, 'warning');
            } else {
            }

        } catch (error) {
            showNotification('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            this.fallbackInitialization();
        }
    }

    async initializeBaseComponents() {
        const components = [
            { name: 'themeManager', class: EnhancedThemeManager, critical: true },
            { name: 'tooltipManager', class: TooltipManager, critical: false },
            { name: 'refreshButton', class: RefreshButton, critical: false },
            { name: 'navigation', class: Navigation, critical: false }
        ];

        for (const { name, class: ComponentClass, critical } of components) {
            try {
                const instance = new ComponentClass();
                this.components.set(name, instance);
            } catch (error) {
                const errorMsg = `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${name}: ${error.message}`;
                this.initializationErrors.push(errorMsg);
                
                if (critical) {
                    throw new Error(errorMsg);
                } else {
                }
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
        try {
            ButtonEffects.init();
        } catch (error) {
            this.initializationErrors.push(`ButtonEffects: ${error.message}`);
        }
    }

    async initializePage() {
        const path = window.location.pathname;
        let pageInitialized = false;
        
        try {
            if (path.includes('kasko')) {
                this.currentPage = new KaskoPage();
                this.components.set('kaskoPage', this.currentPage);
                pageInitialized = true;
                
            } else if (path.includes('megahelper')) {
                this.currentPage = new MegahelperPage();
                this.components.set('megahelperPage', this.currentPage);
                pageInitialized = true;
                
            } else if (path.includes('data_extraction') || path.includes('metragi')) {
                this.currentPage = new MetragiPage();
                this.components.set('metragiPage', this.currentPage);
                pageInitialized = true;
                
            } else if (path.includes('software')) {
                this.currentPage = new SoftwarePage();
                this.components.set('softwarePage', this.currentPage);
                pageInitialized = true;
                
            } else if (path.includes('sql')) {
                this.currentPage = new SqlPage();
                this.components.set('sqlPage', this.currentPage);
                pageInitialized = true;
                
            } else {
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –Ω–∞–ª–∏—á–∏—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if (document.getElementById('extractionForm')) {
                    this.currentPage = new MetragiPage();
                    this.components.set('metragiPage', this.currentPage);
                    pageInitialized = true;
                } else if (document.getElementById('dataForm')) {
                    this.currentPage = new MegahelperPage();
                    this.components.set('megahelperPage', this.currentPage);
                    pageInitialized = true;
                } else if (document.getElementById('monaco-editor')) {
                    this.currentPage = new SqlPage();
                    this.components.set('sqlPage', this.currentPage);
                    pageInitialized = true;
                }
            }
        } catch (error) {
            const errorMsg = `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`;
            this.initializationErrors.push(errorMsg);
            
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
        }
    }

    fallbackInitialization() {
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã —Ç–µ–º—É
            if (!this.components.has('themeManager')) {
                this.components.set('themeManager', new EnhancedThemeManager());
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.setupGlobalHandlers();
            
            this.isInitialized = true;
        } catch (fallbackError) {
        }
    }

    setupGlobalHandlers() {
        try {
            this.setupAnimations();
        } catch (error) {
        }
    }

    setupAnimations() {
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-fade-in');
                }
            });
        }, observerOptions);

        document.querySelectorAll('.dashboard-card, .metric-card').forEach(card => {
            observer.observe(card);
        });
    }

    getComponent(name) {
        return this.components.get(name);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    getInitializationErrors() {
        return this.initializationErrors;
    }

    reinitializePage() {
        if (this.currentPage) {
            this.initializePage();
        }
    }

    getComponentsStatus() {
        const status = {};
        this.components.forEach((component, name) => {
            status[name] = {
                initialized: !!component,
                type: component.constructor.name
            };
        });
        return status;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.OrionApp = new OrionDynamicsApp();

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.OrionApp.init();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugOrion = {
    getErrors: () => window.OrionApp.getInitializationErrors(),
    getStatus: () => window.OrionApp.getComponentsStatus(),
    reinit: () => window.OrionApp.reinitializePage(),
    checkJQuery: () => {
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∞—Ç
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');
    },
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    checkPage: () => {
        const path = window.location.pathname;
    },
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    forceInit: {
        metragi: () => {
            try {
                const page = new MetragiPage();
                window.OrionApp.components.set('metragiPage', page);
                return page;
            } catch (error) {
            }
        }
    },
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è MegahelperPage
    megahelper: {
        getStatus: () => {
            const page = window.OrionApp.getComponent('megahelperPage');
            return page ? page.getDatePickerStatus() : 'MegahelperPage –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
        },
        switchToNative: () => {
            const page = window.OrionApp.getComponent('megahelperPage');
            if (page) page.switchToNativeDatePickers();
        },
        retryJQuery: () => {
            const page = window.OrionApp.getComponent('megahelperPage');
            if (page) page.retryJQueryDatePickers();
        }
    },
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è MetragiPage
    metragi: {
        getStatus: () => {
            const page = window.OrionApp.getComponent('metragiPage');
            if (!page) {
                return 'MetragiPage –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
            }
            return page.getStatus();
        },
        checkFileInput: () => {
            const fileInput = document.getElementById('excel_file');
            const fileInfo = document.getElementById('file-info');
            const fileName = document.getElementById('file-name');
            const submitButton = document.getElementById('submitButton');
            const uploadContainer = document.querySelector('.file-upload-container');
        },
        testFile: () => {
            const page = window.OrionApp.getComponent('metragiPage');
            if (page) {
                page.testFileSelection();
            } else {
            }
        },
        checkEvents: () => {
            const fileInput = document.getElementById('excel_file');
            if (fileInput) {
                
                // –ö–ª–æ–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
                const events = typeof getEventListeners !== 'undefined' ? getEventListeners(fileInput) : 'getEventListeners –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            }
        },
        simulateClick: () => {
            const fileInput = document.getElementById('excel_file');
            if (fileInput) {
                fileInput.click();
            }
        },
        checkHTML: () => {
            const form = document.getElementById('extractionForm');
        }
    },
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è SqlPage
    sql: {
        getStatus: () => {
            const page = window.OrionApp.getComponent('sqlPage');
            return page ? page.getStatus() : 'SqlPage –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
        },
        checkTable: () => {
            const table = document.getElementById('results-table');
        },
        clearResults: () => {
            const page = window.OrionApp.getComponent('sqlPage');
            if (page) page.clearResultsTable();
        }
    },

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    buttons: {
        test: () => {
        },
        testRipple: () => {
            const button = document.getElementById('darkModeToggle');
            if (button) {
                const event = new MouseEvent('click', {
                    clientX: button.getBoundingClientRect().left + 30,
                    clientY: button.getBoundingClientRect().top + 30
                });
                button.dispatchEvent(event);
            }
        },
        checkTheme: () => {
            const themeManager = window.OrionApp.getComponent('themeManager');
        }
    }
};

export default OrionDynamicsApp;