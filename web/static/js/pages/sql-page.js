/**
 * üóÑÔ∏è –ú–æ–¥—É–ª—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã SQL –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
 */
import { $, $$, showNotification } from '../core/utils.js';
import { MonacoEditor } from '../features/monaco-editor.js';

export class SqlPage {
    constructor() {
        this.dbSelect = $('#db-select');
        this.runButton = $('#run-button');
        this.saveButton = $('#save-button');
        this.clearButton = $('#clear-button');
        this.tabButtons = $$('.tab-button');
        this.tabContents = $$('.tab-content');
        this.resultsTable = $('#results-table');
        this.resultsContainer = $('.results-container');
        
        this.monacoEditor = null;
        this.fullResultsData = { columns: [], rows: [] };
        this.databaseOptions = ["ACTUAR2", "Oracle", "PostgreSQL", "adinsure_prod"];
        this.lastQueryResults = null; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        this.init();
    }

    async init() {
        
        this.populateDatabaseSelect();
        this.setupTabButtons();
        this.setupPresetQueries();
        this.setupEventListeners();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Monaco Editor
        await this.initializeMonacoEditor();
        
        this.loadHistory();
        
    }

    async initializeMonacoEditor() {
        try {
            this.monacoEditor = new MonacoEditor('#monaco-editor', {
                language: 'sql',
                value: ''
            });
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–¥–∞', 'error');
        }
    }

    populateDatabaseSelect() {
        if (!this.dbSelect) return;
        
        this.dbSelect.innerHTML = '';
        
        const defaultOption = document.createElement('option');
        defaultOption.value = "";
        defaultOption.disabled = true;
        defaultOption.selected = true;
        defaultOption.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...";
        this.dbSelect.appendChild(defaultOption);

        this.databaseOptions.forEach(dbName => {
            const option = document.createElement('option');
            option.value = dbName;
            option.textContent = dbName;
            this.dbSelect.appendChild(option);
        });
    }

    setupTabButtons() {
        this.tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                this.switchTab(button.dataset.tab);
            });
        });
    }

    switchTab(tabId) {
        this.tabButtons.forEach(btn => btn.classList.remove('active'));
        this.tabContents.forEach(content => content.style.display = 'none');

        const activeButton = $(`.tab-button[data-tab="${tabId}"]`);
        const activeContent = $(`#${tabId}-tab`);
        
        if (activeButton) activeButton.classList.add('active');
        if (activeContent) activeContent.style.display = 'block';
        
        if (tabId === 'history') {
            this.loadHistory();
        }
    }

    setupPresetQueries() {
        const presetToggle = $('#preset-toggle');
        const presetDropdown = $('#preset-dropdown');
        
        if (presetToggle && presetDropdown) {
            presetToggle.addEventListener('click', () => {
                presetDropdown.classList.toggle('show');
                const icon = presetToggle.querySelector('.fa-chevron-down');
                if (icon) {
                    icon.style.transform = presetDropdown.classList.contains('show') ? 
                        'rotate(180deg)' : 'rotate(0deg)';
                }
            });

            presetDropdown.addEventListener('click', (event) => {
                const target = event.target.closest('.preset-item');
                if (!target) return;

                const query = target.getAttribute('data-query');
                const database = target.getAttribute('data-database');
                
                if (this.monacoEditor) {
                    this.monacoEditor.setValue(query);
                }
                
                if (database && this.dbSelect) {
                    this.dbSelect.value = database;
                }
                
                presetDropdown.classList.remove('show');
                const icon = presetToggle.querySelector('.fa-chevron-down');
                if (icon) icon.style.transform = 'rotate(0deg)';
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
            document.addEventListener('click', (event) => {
                if (!presetToggle.contains(event.target) && !presetDropdown.contains(event.target)) {
                    presetDropdown.classList.remove('show');
                    const icon = presetToggle.querySelector('.fa-chevron-down');
                    if (icon) icon.style.transform = 'rotate(0deg)';
                }
            });
        }
    }

    setupEventListeners() {
        if (this.runButton) {
            this.runButton.addEventListener('click', () => this.executeQuery());
        }

        if (this.saveButton) {
            this.saveButton.addEventListener('click', () => this.saveResults());
        }

        if (this.clearButton) {
            this.clearButton.addEventListener('click', () => this.clearEditor());
        }
    }

    async executeQuery() {
        const sqlQuery = this.monacoEditor?.getValue();
        const selectedDb = this.dbSelect?.value;
        
        if (!sqlQuery?.trim()) {
            this.logMessage("–û—à–∏–±–∫–∞: SQL-–∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω", "ERROR");
            showNotification("–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å", "error");
            return;
        }

        if (!this.databaseOptions.includes(selectedDb)) {
            this.logMessage("–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "ERROR");
            showNotification("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", "error");
            return;
        }

        const originalText = this.runButton?.innerHTML || '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å';
        
        try {
            if (this.runButton) {
                this.runButton.disabled = true;
                this.runButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
            }
            
            this.updateExecutionMessage(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${selectedDb}...`);
            this.logMessage(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${selectedDb}`, "INFO");

            const startTime = Date.now();
            
            const response = await fetch('/sql/execute', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    sql_query: sqlQuery,
                    database: selectedDb
                })
            });

            const executionTime = (Date.now() - startTime) / 1000;

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞');
            }

            const data = await response.json();
            this.handleQueryResults(data, selectedDb, executionTime, sqlQuery);

        } catch (error) {
            this.handleQueryError(error);
        } finally {
            if (this.runButton) {
                this.runButton.disabled = false;
                this.runButton.innerHTML = originalText;
            }
        }
    }

    handleQueryResults(data, database, executionTime, query) {
        if (data.error) {
            this.logMessage(`–û—à–∏–±–∫–∞: ${data.error}`, "ERROR");
            this.updateExecutionMessage(`–û—à–∏–±–∫–∞: ${data.error}`);
            this.clearResultsTable();
            return;
        }

        let columns = [];
        let rows = [];

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
        if (data.results?.length > 0) {
            const resultSet = data.results[0];
            if (resultSet.columns && resultSet.rows) {
                columns = resultSet.columns;
                rows = resultSet.rows;
            }
        } else if (data.columns && data.rows) {
            columns = data.columns;
            rows = data.rows;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.fullResultsData = { columns, rows };
        this.lastQueryResults = {
            database,
            query,
            columns,
            rows,
            executionTime,
            timestamp: new Date().toISOString(),
            rowCount: rows.length
        };

        this.displayResults(columns, rows);
        
        const message = rows.length > 0 ? 
            `${database}: –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ - –ø–æ–ª—É—á–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫` :
            `${database}: –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã`;
            
        this.updateExecutionMessage(message, executionTime);
        this.logMessage(`${message} –∑–∞ ${executionTime.toFixed(2)} —Å–µ–∫.`, "INFO");
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if (this.saveButton) {
            this.saveButton.disabled = rows.length === 0;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫
        this.saveQueryToHistory(database, query, rows.length, executionTime);
        this.switchTab('results');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (rows.length > 0) {
            showNotification(`–ü–æ–ª—É—á–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`, 'success');
        } else {
            showNotification('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã', 'info');
        }
    }

    displayResults(columns, rows) {
        if (!this.resultsTable) {
            return;
        }

        this.clearResultsTable();

        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (columns && columns.length > 0) {
            const thead = this.resultsTable.querySelector('thead') || this.resultsTable.createTHead();
            thead.innerHTML = '';
            
            const headerRow = thead.insertRow();
            columns.forEach(column => {
                const th = document.createElement('th');
                th.textContent = column;
                headerRow.appendChild(th);
            });
        }

        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        const tbody = this.resultsTable.querySelector('tbody') || this.resultsTable.createTBody();
        tbody.innerHTML = '';

        if (rows && rows.length > 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 25 —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
            const displayRows = rows.slice(0, 25);
            
            displayRows.forEach((row, index) => {
                const tr = tbody.insertRow();
                tr.classList.add(index % 2 === 0 ? 'even-row' : 'odd-row');
                
                columns.forEach(column => {
                    const td = tr.insertCell();
                    const value = row[column] === null ? 'NULL' : String(row[column] || '');
                    td.textContent = value;
                    if (value === 'NULL') {
                        td.classList.add('null-value');
                        td.style.fontStyle = 'italic';
                        td.style.color = '#999';
                    }
                });
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫
            if (rows.length > 25) {
                const tr = tbody.insertRow();
                const td = tr.insertCell();
                td.colSpan = columns.length;
                td.className = 'text-center p-3 text-muted';
                td.innerHTML = `
                    <i class="fas fa-info-circle me-2"></i>
                    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –ø–µ—Ä–≤—ã—Ö 25 —Å—Ç—Ä–æ–∫ –∏–∑ ${rows.length}. 
                    –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏.
                `;
            }
        } else {
            // –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const tr = tbody.insertRow();
            const td = tr.insertCell();
            td.colSpan = columns.length > 0 ? columns.length : 1;
            td.textContent = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
            td.style.textAlign = 'center';
            td.style.padding = '2rem';
            td.style.fontStyle = 'italic';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (this.resultsContainer) {
            this.resultsContainer.style.display = 'block';
        }
    }

    clearResultsTable() {
        if (this.resultsTable) {
            this.resultsTable.innerHTML = '';
        }
        
        if (this.saveButton) {
            this.saveButton.disabled = true;
        }
    }

    handleQueryError(error) {
        this.logMessage(`–û—à–∏–±–∫–∞: ${error.message}`, "ERROR");
        this.updateExecutionMessage(`–û—à–∏–±–∫–∞: ${error.message}`);
        showNotification(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'error');
        this.clearResultsTable();
        this.fullResultsData = { columns: [], rows: [] }; // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }

    updateExecutionMessage(message, time = null) {
        const messageEl = $('#execution-message');
        const timeEl = $('.execution-time');
        
        if (messageEl) messageEl.textContent = message;
        if (timeEl && time !== null) {
            timeEl.textContent = `${time.toFixed(2)} —Å–µ–∫`;
        }
    }

    async saveResults() {

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ lastQueryResults –µ—Å–ª–∏ fullResultsData –ø—É—Å—Ç
        const dataToSave = this.fullResultsData.rows?.length > 0 ? 
            this.fullResultsData : 
            this.lastQueryResults;

        if (!dataToSave?.rows?.length) {
            showNotification("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "warning");
            this.logMessage("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö", "WARNING");
            return;
        }

        const originalText = this.saveButton?.innerHTML || '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã';
        
        try {
            if (this.saveButton) {
                this.saveButton.disabled = true;
                this.saveButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            }

            const tableData = [dataToSave.columns, ...dataToSave.rows];
            
            const response = await fetch('/sql/save_excel', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ table_data: tableData })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
            }

            const blob = await response.blob();
            this.downloadFile(blob, 'sql_results.xlsx');
            
            showNotification(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${dataToSave.rows.length} —Å—Ç—Ä–æ–∫)`, "success");

        } catch (error) {
            this.logMessage(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`, "ERROR");
            showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞", "error");
        } finally {
            if (this.saveButton) {
                this.saveButton.disabled = false;
                this.saveButton.innerHTML = originalText;
            }
        }
    }

    downloadFile(blob, filename) {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    }

    clearEditor() {
        if (this.monacoEditor) {
            this.monacoEditor.setValue('');
        }
        this.logMessage("–†–µ–¥–∞–∫—Ç–æ—Ä –æ—á–∏—â–µ–Ω", "INFO");
    }

    logMessage(message, type = "INFO") {
        const logOutput = $('#log-output');
        if (!logOutput) return;

        const paragraph = document.createElement('p');
        paragraph.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
        paragraph.classList.add('log-message', `log-${type.toLowerCase()}`);

        // –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        switch (type) {
            case 'ERROR':
                paragraph.style.color = '#dc3545';
                break;
            case 'WARNING':
                paragraph.style.color = '#ffc107';
                break;
            case 'INFO':
                paragraph.style.color = '#17a2b8';
                break;
        }

        logOutput.prepend(paragraph);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        while (logOutput.children.length > 10) {
            logOutput.removeChild(logOutput.lastChild);
        }

        const logArea = $('.log-area');
        if (logArea) logArea.classList.add('has-content');
    }

    saveQueryToHistory(database, query, rowCount = 0, executionTime = 0) {
        const history = JSON.parse(localStorage.getItem('sql_query_history')) || [];
        const timestamp = new Date().toISOString();
        
        const historyItem = { 
            database, 
            query, 
            timestamp,
            rowCount,
            executionTime: executionTime.toFixed(2)
        };
        
        history.unshift(historyItem);
        
        if (history.length > 20) {
            history.pop();
        }
        
        localStorage.setItem('sql_query_history', JSON.stringify(history));
    }

    loadHistory() {
        const historyList = $('#history-list');
        if (!historyList) return;

        const history = JSON.parse(localStorage.getItem('sql_query_history')) || [];

        if (history.length === 0) {
            historyList.innerHTML = `
                <div class="text-center p-4">
                    <i class="fas fa-history fa-3x text-muted mb-3"></i>
                    <h5>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞</h5>
                    <p class="text-muted">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
                </div>
            `;
            return;
        }

        historyList.innerHTML = '';
        
        history.forEach(item => {
            const historyItem = this.createHistoryItem(item);
            historyList.appendChild(historyItem);
        });
    }

    createHistoryItem(item) {
        const historyItem = document.createElement('div');
        historyItem.classList.add('history-item');

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        const stats = [];
        if (item.rowCount !== undefined) {
            stats.push(`${item.rowCount} —Å—Ç—Ä–æ–∫`);
        }
        if (item.executionTime !== undefined) {
            stats.push(`${item.executionTime} —Å–µ–∫`);
        }
        const statsText = stats.length > 0 ? ` ‚Ä¢ ${stats.join(' ‚Ä¢ ')}` : '';

        historyItem.innerHTML = `
            <div class="history-item-database">${item.database}</div>
            <div class="history-item-query">${item.query.substring(0, 100)}${item.query.length > 100 ? '...' : ''}</div>
            <div class="history-item-time">
                <i class="far fa-clock"></i> ${this.timeAgoFromISO(item.timestamp)}${statsText}
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
        historyItem.style.cssText = `
            padding: 12px 16px;
            margin-bottom: 8px;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            background: #fff;
        `;

        historyItem.addEventListener('mouseenter', () => {
            historyItem.style.backgroundColor = '#f8f9fa';
            historyItem.style.borderColor = '#dee2e6';
            historyItem.style.transform = 'translateY(-1px)';
            historyItem.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
        });

        historyItem.addEventListener('mouseleave', () => {
            historyItem.style.backgroundColor = '#fff';
            historyItem.style.borderColor = '#e9ecef';
            historyItem.style.transform = 'translateY(0)';
            historyItem.style.boxShadow = 'none';
        });

        historyItem.addEventListener('click', () => {
            if (this.dbSelect) this.dbSelect.value = item.database;
            if (this.monacoEditor) this.monacoEditor.setValue(item.query);
            this.switchTab('editor');
            showNotification(`–ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (${item.rowCount || 0} —Å—Ç—Ä–æ–∫)`, 'info');
        });

        return historyItem;
    }

    timeAgoFromISO(isoTimestamp) {
        const now = new Date();
        const then = new Date(isoTimestamp);
        const diff = now.getTime() - then.getTime();
        const seconds = Math.floor(diff / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (days > 0) {
            return `${days} ${days === 1 ? '–¥–µ–Ω—å' : days < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'} –Ω–∞–∑–∞–¥`;
        } else if (hours > 0) {
            return `${hours} ${hours === 1 ? '—á–∞—Å' : hours < 5 ? '—á–∞—Å–∞' : '—á–∞—Å–æ–≤'} –Ω–∞–∑–∞–¥`;
        } else if (minutes > 0) {
            return `${minutes} ${minutes === 1 ? '–º–∏–Ω—É—Ç–∞' : minutes < 5 ? '–º–∏–Ω—É—Ç—ã' : '–º–∏–Ω—É—Ç'} –Ω–∞–∑–∞–¥`;
        } else {
            return `${seconds} ${seconds === 1 ? '—Å–µ–∫—É–Ω–¥–∞' : '—Å–µ–∫—É–Ω–¥—ã'} –Ω–∞–∑–∞–¥`;
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    getStatus() {
        return {
            monacoReady: !!this.monacoEditor,
            tableFound: !!this.resultsTable,
            hasResults: this.fullResultsData.rows.length > 0,
            hasLastQueryResults: !!this.lastQueryResults?.rows?.length,
            selectedDatabase: this.dbSelect?.value,
            saveButtonEnabled: !this.saveButton?.disabled
        };
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    enableSaveButton() {
        if (this.saveButton) {
            this.saveButton.disabled = false;
        }
    }
}